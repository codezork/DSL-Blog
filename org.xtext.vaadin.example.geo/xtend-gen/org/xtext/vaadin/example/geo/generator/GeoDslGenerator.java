package org.xtext.vaadin.example.geo.generator;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.StringWriter;
import java.net.URI;
import java.net.URL;
import java.util.List;
import java.util.Properties;
import java.util.regex.Pattern;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.osgi.framework.Bundle;
import org.osgi.framework.FrameworkUtil;
import org.xtext.vaadin.example.geo.GeoModel;

@SuppressWarnings("all")
public class GeoDslGenerator extends JvmModelGenerator {
  private NullProgressMonitor monitor = new NullProgressMonitor();
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess fsa) {
    try {
      EObject _get = input.getContents().get(0);
      GeoModel model = ((GeoModel) _get);
      IProject[] _projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
      for (final IProject project : _projects) {
        if ((project.isOpen() && ((List<String>)Conversions.doWrapArray(project.getDescription().getNatureIds())).contains("org.eclipse.xtext.ui.shared.xtextNature"))) {
          IFolder settings = project.getFolder(".settings");
          IFile prefs = settings.getFile("org.eclipse.jdt.core.prefs");
          boolean _exists = prefs.exists();
          if (_exists) {
            prefs.delete(true, this.monitor);
          }
          prefs.create(this.buildJDT(), true, this.monitor);
          IFile pom = project.getFile("pom.xml");
          pom.delete(true, this.monitor);
          pom.create(this.buildOSGiPom(project), true, this.monitor);
          IFile bnd = project.getFile("bnd.bnd");
          bnd.delete(true, this.monitor);
          bnd.create(this.buildBnd(project), true, this.monitor);
          IFile config = project.getFile("config.properties");
          config.delete(true, this.monitor);
          config.create(this.buildFelixConfig(model), true, this.monitor);
          IFolder srcFolder = project.getFolder("src");
          IFolder mainFolder = srcFolder.getFolder("main");
          IFolder resources = mainFolder.getFolder("resources");
          boolean _exists_1 = resources.exists();
          boolean _not = (!_exists_1);
          if (_not) {
            resources.create(true, true, this.monitor);
          }
          IFolder metaInf = resources.getFolder("META-INF");
          boolean _exists_2 = metaInf.exists();
          boolean _not_1 = (!_exists_2);
          if (_not_1) {
            metaInf.create(true, true, this.monitor);
          }
          IFolder resources2 = metaInf.getFolder("resources");
          boolean _exists_3 = resources2.exists();
          boolean _not_2 = (!_exists_3);
          if (_not_2) {
            resources2.create(true, true, this.monitor);
          }
          this.copyResources(project, "resources", "src/main/resources/META-INF/resources");
          this.copyResources(project, "scripts", "src/main/resources/META-INF/resources/frontend/src");
          IFolder frontend = resources2.getFolder("frontend");
          IFolder src = frontend.getFolder("src");
          IFile topologyJS = src.getFile("topology.js");
          boolean _exists_4 = topologyJS.exists();
          if (_exists_4) {
            topologyJS.delete(true, this.monitor);
          }
          topologyJS.create(this.buildTopology(model), true, this.monitor);
        }
      }
      super.doGenerate(input, fsa);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildJDT() {
    try {
      Properties prop = new Properties();
      prop.setProperty("eclipse.preferences.version", "1");
      prop.setProperty("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.8");
      prop.setProperty("org.eclipse.jdt.core.compiler.compliance", "1.8");
      prop.setProperty("org.eclipse.jdt.core.compiler.source", "1.8");
      prop.setProperty("org.eclipse.jdt.core.compiler.problem.enablePreviewFeatures", "disabled");
      prop.setProperty("org.eclipse.jdt.core.compiler.problem.forbiddenReference", "warning");
      prop.setProperty("org.eclipse.jdt.core.compiler.problem.reportPreviewFeatures", "ignore");
      prop.setProperty("org.eclipse.jdt.core.compiler.release", "disabled");
      StringWriter writer = new StringWriter();
      prop.store(writer, null);
      byte[] _bytes = writer.toString().getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildOSGiPom(final IProject prj) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      _builder.newLine();
      _builder.append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<modelVersion>4.0.0</modelVersion>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<groupId>");
      String _name = prj.getName();
      _builder.append(_name, "\t");
      _builder.append("</groupId>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<artifactId>");
      String _name_1 = prj.getName();
      _builder.append(_name_1, "\t");
      _builder.append("</artifactId>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<version>1.0.0-SNAPSHOT</version>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<name>The Geo Sample OSGi</name>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<packaging>jar</packaging>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<properties>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<maven.compiler.source>1.8</maven.compiler.source>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<maven.compiler.target>1.8</maven.compiler.target>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<vaadin.version>14.0.9</vaadin.version>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<felix.version>6.0.0</felix.version>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<felix.distribution>https://repo1.maven.org/maven2/org/apache/felix/org.apache.felix.main.distribution/${felix.version}/org.apache.felix.main.distribution-${felix.version}.zip</felix.distribution>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<felix.home>felix-framework-${felix.version}</felix.home>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<osgi.bundle.version>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}</osgi.bundle.version>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</properties>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<repositories>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<!-- Repository used by many Vaadin add-ons -->");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<repository>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>Vaadin Directory</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<url>https://maven.vaadin.com/vaadin-addons</url>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</repository>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<repository>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>vaadin-prereleases</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<url>https://maven.vaadin.com/vaadin-prereleases</url>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</repository>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<repository>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>vaadin-snapshots</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<url>https://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</repository>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</repositories>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pluginRepositories>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<pluginRepository>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>vaadin-prereleases</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<url>https://maven.vaadin.com/vaadin-prereleases</url>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</pluginRepository>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<pluginRepository>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>vaadin-snapshots</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<url>https://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</pluginRepository>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</pluginRepositories>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<dependencyManagement>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<dependencies>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<groupId>com.vaadin</groupId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<artifactId>vaadin-bom</artifactId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<type>pom</type>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<scope>import</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<version>${vaadin.version}</version>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</dependencies>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</dependencyManagement>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<dependencies>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<groupId>com.vaadin</groupId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<!-- Replace artifactId with vaadin-core to use only free components -->");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<artifactId>vaadin</artifactId>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<groupId>com.vaadin</groupId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<artifactId>flow-osgi</artifactId>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<groupId>org.osgi</groupId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<artifactId>osgi.cmpn</artifactId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<version>7.0.0</version>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<groupId>org.osgi</groupId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<artifactId>org.osgi.core</artifactId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<version>6.0.0</version>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<!-- Added to provide logging output as Flow uses -->");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<!-- the unbound SLF4J no-operation (NOP) logger implementation -->");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<groupId>org.slf4j</groupId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<artifactId>slf4j-simple</artifactId>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<groupId>javax.servlet</groupId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<artifactId>javax.servlet-api</artifactId>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<version>3.1.0</version>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</dependencies>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<build>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<plugins>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<groupId>org.codehaus.mojo</groupId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<artifactId>build-helper-maven-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<version>3.0.0</version>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<id>parse-version</id>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<goal>parse-version</goal>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<id>add-resource</id>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<phase>generate-resources</phase>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<goal>add-resource</goal>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<resources>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<resource>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<directory>${project.build.directory}/generated-resources</directory>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<targetPath></targetPath>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</resource>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</resources>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<groupId>biz.aQute.bnd</groupId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<artifactId>bnd-maven-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<version>4.1.0</version>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<goal>bnd-process</goal>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<groupId>org.apache.maven.plugins</groupId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<artifactId>maven-jar-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<version>3.1.2</version>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<archive>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<index>false</index>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<manifest>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<addDefaultImplementationEntries>true</addDefaultImplementationEntries>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</manifest>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</archive>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<groupId>org.apache.maven.plugins</groupId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<artifactId>maven-dependency-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<id>unpack-dependencies</id>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<phase>generate-resources</phase>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<goal>unpack-dependencies</goal>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<includes>**/webjars/**</includes>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<artifactId>maven-antrun-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<version>1.7</version>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<id>copy-frontend</id>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<phase>generate-resources</phase>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<tasks>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<mkdir");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("dir=\"${project.build.directory}/generated-resources/frontend/bower_components\"></mkdir>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<copy");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("todir=\"${project.build.directory}/generated-resources/frontend/bower_components\">");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<fileset");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("dir=\"${project.build.directory}/dependency/META-INF/resources/webjars/\" />");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</copy>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<mkdir");
      _builder.newLine();
      _builder.append("                                \t");
      _builder.append("dir=\"${project.build.directory}/generated-resources/frontend/src\"></mkdir>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<copy");
      _builder.newLine();
      _builder.append("                                \t");
      _builder.append("todir=\"${project.build.directory}/generated-resources/frontend/src\">");
      _builder.newLine();
      _builder.append("                                \t");
      _builder.append("<fileset ");
      _builder.newLine();
      _builder.append("                                \t\t");
      _builder.append("dir=\"./src/main/resources/META-INF/resources/frontend/src\" />");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</copy>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<mkdir");
      _builder.newLine();
      _builder.append("                                \t");
      _builder.append("dir=\"${project.build.directory}/generated-resources/frontend/styles\"></mkdir>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<copy");
      _builder.newLine();
      _builder.append("                                \t");
      _builder.append("todir=\"${project.build.directory}/generated-resources/frontend/styles\">");
      _builder.newLine();
      _builder.append("                                \t");
      _builder.append("<fileset ");
      _builder.newLine();
      _builder.append("                                \t\t");
      _builder.append("dir=\"./src/main/resources/META-INF/resources/frontend/styles\" />");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</copy>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</tasks>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<goal>run</goal>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</plugins>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<pluginManagement>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<plugins>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<!--This plugin\'s configuration is used to store Eclipse ");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("m2e settings only. It has no influence on the Maven build itself. -->");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.eclipse.m2e</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>lifecycle-mapping</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.0</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<lifecycleMappingMetadata>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<pluginExecutions>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<pluginExecution>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<pluginExecutionFilter>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<groupId>");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("org.apache.maven.plugins");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("</groupId>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<artifactId>");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("maven-antrun-plugin");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("</artifactId>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<versionRange>");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("[1.7,)");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("</versionRange>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("<goal>run</goal>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("</pluginExecutionFilter>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<action>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<ignore></ignore>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("</action>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</pluginExecution>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</pluginExecutions>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</lifecycleMappingMetadata>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</plugins>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</pluginManagement>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</build>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<profiles>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<profile>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<!-- Production mode is activated using -Pproduction -->");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>production</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<vaadin.productionMode>true</vaadin.productionMode>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</properties>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<dependencies>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>com.vaadin</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>flow-server-production-mode</artifactId>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</dependencies>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<build>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<plugins>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<groupId>com.vaadin</groupId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<artifactId>vaadin-maven-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<version>${vaadin.version}</version>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<goal>copy-production-files</goal>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<goal>package-for-production</goal>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</plugins>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</build>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</profile>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<profile>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>prepare-osgi-container</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<dependencies>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.felix</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.felix.scr</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>2.1.10</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.felix</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.felix.scr.annotations</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.12.0</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.felix</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.felix.scr.compat</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.4</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.felix</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.felix.scr.ds-annotations</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.2.10</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.felix</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.felix.http.servlet-api</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.1.2</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.felix</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.felix.http.jetty</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>4.0.6</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<!-- Those dependencies are need for OSGi container where ");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("this bundle will be deployed. They will be copied into the bundle folder ");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("of OSGi container and automatically installed form there. -->");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.osgi</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.osgi.service.serviceloader</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.0</version>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.aries.spifly</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.aries.spifly.static.bundle</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.12</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.aries.spifly</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.aries.spifly.static.tool</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.12</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.aries.spifly</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.aries.spifly.core-internal</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.12</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.aries.spifly</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.aries.spifly.weaver-internal</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.12</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.aries</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.aries.util</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.1.3</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<dependency>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<groupId>org.apache.aries.spifly</groupId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<artifactId>org.apache.aries.spifly.dynamic.bundle</artifactId>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<version>1.0.12</version>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<scope>provided</scope>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</dependency>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</dependencies>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<build>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<plugins>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<groupId>org.apache.maven.plugins</groupId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<artifactId>maven-antrun-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<id>download-files</id>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<phase>pre-integration-test</phase>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<goal>run</goal>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<tasks>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<get");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("src=\"${felix.distribution}\"");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("dest=\"${project.build.directory}/felix.zip\"");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("verbose=\"false\"");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("usetimestamp=\"true\" />");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<unzip");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("src=\"${project.build.directory}/felix.zip\"");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("dest=\"${project.build.directory}\"></unzip>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("</tasks>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<id>copy-self</id>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<phase>pre-integration-test</phase>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<goal>run</goal>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<tasks>");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("<copy");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("todir=\"${project.build.directory}/${felix.home}/bundle\"");
      _builder.newLine();
      _builder.append("                                            ");
      _builder.append("file=\"${project.build.directory}/${project.artifactId}-${project.version}.jar\">");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("</copy>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("</tasks>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<groupId>org.apache.maven.plugins</groupId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<artifactId>maven-dependency-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<version>3.1.1</version>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<id>copy-dependencies</id>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<phase>pre-integration-test</phase>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<goal>copy-dependencies</goal>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<includeScope>compile</includeScope>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<outputDirectory>${project.build.directory}/${felix.home}/bundle</outputDirectory>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<overWriteIfNewer>true</overWriteIfNewer>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<excludeGroupIds>com.google.code.findbugs,");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("org.seleniumhq.selenium,");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("javax.servlet</excludeGroupIds>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<excludeArtifactIds>osgi.cmpn</excludeArtifactIds>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</plugins>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</build>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</profile>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<profile>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<id>run-osgi-container</id>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<build>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<plugins>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<plugin>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<groupId>org.codehaus.mojo</groupId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<artifactId>exec-maven-plugin</artifactId>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<version>1.6.0</version>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<executions>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("<execution>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<phase>pre-integration-test</phase>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<goals>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<goal>exec</goal>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</goals>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("<configuration>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<executable>java</executable>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<workingDirectory>${project.build.directory}/${felix.home}</workingDirectory>");
      _builder.newLine();
      _builder.append("                                    ");
      _builder.append("<commandlineArgs>-Dgosh.args=\"--nointeractive\" -Dfelix.config.properties=file:${basedir}/config.properties");
      _builder.newLine();
      _builder.append("                                        ");
      _builder.append("-jar bin/felix.jar</commandlineArgs>");
      _builder.newLine();
      _builder.append("                                ");
      _builder.append("</configuration>");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("</execution>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("</executions>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</plugin>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</plugins>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</build>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</profile>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</profiles>");
      _builder.newLine();
      _builder.append("</project>");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildBnd(final IProject prj) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Bundle-SymbolicName: ");
      String _name = prj.getName();
      _builder.append(_name);
      _builder.newLineIfNotEmpty();
      _builder.append("Bundle-Name: Geo Example");
      _builder.newLine();
      _builder.append("Bundle-Version: ${osgi.bundle.version}");
      _builder.newLine();
      _builder.append("Bundle-RequiredExecutionEnvironment: JavaSE-1.8");
      _builder.newLine();
      _builder.append("Bundle-License: http://www.apache.org/licenses/LICENSE-2.0");
      _builder.newLine();
      _builder.append("Import-Package: *");
      _builder.newLine();
      _builder.append("Export-Package: !*");
      _builder.newLine();
      _builder.append("Vaadin-OSGi-Extender: true");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildFelixConfig(final GeoModel model) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("felix.auto.deploy.action=install,start");
      _builder.newLine();
      _builder.append("felix.log.level=1");
      _builder.newLine();
      _builder.append("org.osgi.service.http.port=");
      int _port = model.getPort();
      _builder.append(_port);
      _builder.newLineIfNotEmpty();
      _builder.append("obr.repository.url=http://felix.apache.org/obr/releases.xml");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void copyResources(final IProject project, final String srcPath, final String dstPath) {
    try {
      Bundle bundle = FrameworkUtil.getBundle(this.getClass());
      URL path = bundle.getEntry(srcPath);
      if ((path != null)) {
        URI _uRI = FileLocator.resolve(path).toURI();
        File srcFolder = new File(_uRI);
        String[] folders = dstPath.split(Pattern.quote("/"));
        IContainer root = ((IContainer) project);
        for (final String f : folders) {
          {
            Path _path = new Path(f);
            IFolder fldr = root.getFolder(_path);
            boolean _exists = fldr.exists();
            boolean _not = (!_exists);
            if (_not) {
              fldr.create(true, true, this.monitor);
            }
            root = fldr;
          }
        }
        this.copyFiles(srcFolder, root);
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void copyFiles(final File srcFolder, final IContainer destFolder) {
    try {
      File[] _listFiles = srcFolder.listFiles();
      for (final File f : _listFiles) {
        boolean _isDirectory = f.isDirectory();
        if (_isDirectory) {
          String _name = f.getName();
          Path _path = new Path(_name);
          IFolder newFolder = destFolder.getFolder(_path);
          boolean _exists = newFolder.exists();
          boolean _not = (!_exists);
          if (_not) {
            newFolder.create(true, true, this.monitor);
          }
          this.copyFiles(f, newFolder);
        } else {
          String _name_1 = f.getName();
          Path _path_1 = new Path(_name_1);
          IFile newFile = destFolder.getFile(_path_1);
          boolean _exists_1 = newFile.exists();
          boolean _not_1 = (!_exists_1);
          if (_not_1) {
            FileInputStream _fileInputStream = new FileInputStream(f);
            newFile.create(_fileInputStream, true, this.monitor);
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildTopology(final GeoModel model) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("function topology(jsonFileName, element, div, longitude, latitude, scale) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("console.log(\"Topology, \" + jsonFileName);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var width = 800;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var height = 800;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("div.innerHTML = \t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\"<div id=\\\"topology_div\\\">\" + \"</div>\";\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var selection = d3.select(div).select(\"#topology_div\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var svg = selection.append(\"svg\")");
      _builder.newLine();
      _builder.append("\t   ");
      _builder.append(".attr(\"preserveAspectRatio\", \"xMinYMin meet\")");
      _builder.newLine();
      _builder.append("\t   ");
      _builder.append(".attr(\"viewBox\", \"0 0 800 800\")");
      _builder.newLine();
      _builder.append("\t   ");
      _builder.append("// Class to make it responsive.");
      _builder.newLine();
      _builder.append("\t   ");
      _builder.append(".classed(\"svg-content-responsive\", true)");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append(".attr(\"width\", width)");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append(".attr(\"height\", height);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var g = svg.append(\"g\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("loadJSON(jsonFileName, function(response) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var json = JSON.parse(response);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var projection = d3.geoMercator()");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".rotate([0, 9])");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".center([longitude, latitude])");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".scale(scale)    ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".translate([width / 2, height / 2]);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var path = d3.geoPath().projection(projection);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// get the 0. array\'s name");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var key = Object.keys(json.objects)[0];");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// create the \'parts of a country\'");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("g.selectAll(\"path\")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".data(topojson.feature(json, json.objects[key]).features)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".enter().append(\"path\")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".attr(\"class\", \"states\")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".attr(\"d\", path);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("svg.append(\"path\")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".attr(\"class\", \"state-borders\")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append(".attr(\"d\", path(topojson.mesh(json, json.objects[key], function(a, b) { return a !== b; })));\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("g.selectAll(\"path\").on(\"click\", function click(d) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var data = this.__data__;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("element.$server.onTopoClick(data.properties.NAME_1, data.properties.TYPE_2, data.properties.NAME_2);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("});");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("});");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("function loadJSON(name, callback) {   ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var xobj = new XMLHttpRequest();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("xobj.overrideMimeType(\"application/json\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("xobj.onload = function () {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("callback(xobj.responseText);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("xobj.open(\'GET\', name, true);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("xobj.send(null);  ");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
