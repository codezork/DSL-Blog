/**
 * generated by Xtext 2.19.0
 */
package org.xtext.vaadin.example.geo.jvmmodel;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.ClientCallable;
import com.vaadin.flow.component.Composite;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.applayout.AppLayout;
import com.vaadin.flow.component.applayout.DrawerToggle;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dependency.HtmlImport;
import com.vaadin.flow.component.dependency.JavaScript;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.page.Viewport;
import com.vaadin.flow.component.tabs.Tab;
import com.vaadin.flow.component.tabs.Tabs;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.function.DeploymentConfiguration;
import com.vaadin.flow.osgi.support.OsgiVaadinStaticResource;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.PWA;
import com.vaadin.flow.server.VaadinServlet;
import com.vaadin.flow.theme.Theme;
import com.vaadin.flow.theme.lumo.Lumo;
import com.vaadin.flow.theme.material.Material;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmAnnotationReference;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.osgi.framework.BundleContext;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.http.whiteboard.HttpWhiteboardConstants;
import org.xtext.vaadin.example.geo.GeoLayout;
import org.xtext.vaadin.example.geo.GeoModel;
import org.xtext.vaadin.example.geo.GeoTab;
import org.xtext.vaadin.example.geo.GeoTheme;
import org.xtext.vaadin.example.geo.util.AnnotationExtension;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class GeoDslJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private AnnotationExtension _annotationExtension;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final GeoModel model, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    String _packageName = model.getPackageName();
    String _plus = (_packageName + ".VaadinServletRegistration");
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      JvmAnnotationReference anno = this._annotationTypesBuilder.annotationRef(Component.class);
      this._annotationExtension.addAnnAttr(anno, model, "immediate", Boolean.valueOf(true));
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, anno);
      this._jvmTypesBuilder.setDocumentation(it, this._jvmTypesBuilder.getDocumentation(model));
      EList<JvmMember> _members = it.getMembers();
      String _packageName_1 = model.getPackageName();
      String _plus_1 = (_packageName_1 + ".FixedVaadinServlet");
      final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it_1) -> {
        EList<JvmTypeReference> _superTypes = it_1.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(VaadinServlet.class);
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        it_1.setStatic(true);
        it_1.setVisibility(JvmVisibility.PRIVATE);
        EList<JvmMember> _members_1 = it_1.getMembers();
        final Procedure1<JvmOperation> _function_2 = (JvmOperation it_2) -> {
          EList<JvmTypeReference> _exceptions = it_2.getExceptions();
          JvmTypeReference _typeRef_1 = this._typeReferenceBuilder.typeRef(ServletException.class);
          this._jvmTypesBuilder.<JvmTypeReference>operator_add(_exceptions, _typeRef_1);
          EList<JvmFormalParameter> _parameters = it_2.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(model, "servletConfig", this._typeReferenceBuilder.typeRef(ServletConfig.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          EList<JvmAnnotationReference> _annotations_1 = it_2.getAnnotations();
          JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
          this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, _annotationRef);
          it_2.setVisibility(JvmVisibility.PUBLIC);
          final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_3) -> {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("super.init(servletConfig);");
            _builder.newLine();
            _builder.append("getService().setClassLoader(getClass().getClassLoader());");
            it_3.append(_builder);
          };
          this._jvmTypesBuilder.setBody(it_2, _function_3);
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(model, "init", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_2);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
        EList<JvmMember> _members_2 = it_1.getMembers();
        final Procedure1<JvmOperation> _function_3 = (JvmOperation it_2) -> {
          EList<JvmFormalParameter> _parameters = it_2.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(model, "initParameters", this._typeReferenceBuilder.typeRef(Properties.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          EList<JvmAnnotationReference> _annotations_1 = it_2.getAnnotations();
          JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
          this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, _annotationRef);
          it_2.setVisibility(JvmVisibility.PROTECTED);
          final Procedure1<ITreeAppendable> _function_4 = (ITreeAppendable it_3) -> {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("// npm mode is not currently supported");
            _builder.newLine();
            _builder.append("initParameters.setProperty(\"compatibilityMode\", \"true\");\t\t\t\t\t");
            _builder.newLine();
            _builder.append("return super.createDeploymentConfiguration(initParameters);");
            it_3.append(_builder);
          };
          this._jvmTypesBuilder.setBody(it_2, _function_4);
        };
        JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(model, "createDeploymentConfiguration", this._typeReferenceBuilder.typeRef(DeploymentConfiguration.class), _function_3);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
      };
      JvmGenericType _class = this._jvmTypesBuilder.toClass(model, _plus_1, _function_1);
      this._jvmTypesBuilder.<JvmGenericType>operator_add(_members, _class);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(model, "ctx", this._typeReferenceBuilder.typeRef(BundleContext.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmAnnotationReference> _annotations_1 = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Activate.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, _annotationRef);
        final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_2) -> {
          it_2.append(Hashtable.class);
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("<String, Object> properties = new Hashtable<>();");
          _builder.newLine();
          _builder.append("properties.put(");
          it_2.append(_builder);
          it_2.append(HttpWhiteboardConstants.class);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(".HTTP_WHITEBOARD_SERVLET_ASYNC_SUPPORTED, true);");
          _builder_1.newLine();
          _builder_1.append("properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN, \"/*\");");
          _builder_1.newLine();
          _builder_1.append("ctx.registerService(");
          it_2.append(_builder_1);
          it_2.append(Servlet.class);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append(".class, new FixedVaadinServlet(), properties);");
          it_2.append(_builder_2);
        };
        this._jvmTypesBuilder.setBody(it_1, _function_3);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(model, "activate", this._typeReferenceBuilder.typeRef(void.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(model, _plus), _function);
    GeoLayout _layout = model.getLayout();
    boolean _tripleNotEquals = (_layout != null);
    if (_tripleNotEquals) {
      String _packageName_1 = model.getPackageName();
      String _plus_1 = (_packageName_1 + ".");
      String _name = model.getLayout().getName();
      String _plus_2 = (_plus_1 + _name);
      final JvmGenericType layoutCls = this._jvmTypesBuilder.toClass(model, _plus_2);
      String _packageName_2 = model.getPackageName();
      String _plus_3 = (_packageName_2 + ".MainView");
      final JvmGenericType mainViewCls = this._jvmTypesBuilder.toClass(model, _plus_3);
      String _packageName_3 = model.getPackageName();
      String _plus_4 = (_packageName_3 + ".VaadinApp");
      final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
        this._jvmTypesBuilder.setDocumentation(it, this._jvmTypesBuilder.getDocumentation(model));
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Composite.class, this._typeReferenceBuilder.typeRef(Div.class));
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        JvmAnnotationReference route = this._annotationTypesBuilder.annotationRef(Route.class);
        this._annotationExtension.addAnnAttr(route, model, "value", "");
        this._annotationExtension.addAnnAttr(route, model, "layout", this._typeReferenceBuilder.typeRef(layoutCls));
        final JvmGenericType _mainViewCls = mainViewCls;
        EList<JvmMember> _members = it.getMembers();
        final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
          EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
          JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
          this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(model, "attachEvent", this._typeReferenceBuilder.typeRef(AttachEvent.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_2) -> {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("super.onAttach(attachEvent);");
            _builder.newLine();
            it_2.append(_builder);
            it_2.append(UI.class);
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append(".getCurrent().navigate(");
            String _simpleName = _mainViewCls.getSimpleName();
            _builder_1.append(_simpleName);
            _builder_1.append(".class);");
            it_2.append(_builder_1);
          };
          this._jvmTypesBuilder.setBody(it_1, _function_3);
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(model, "onAttach", this._typeReferenceBuilder.typeRef(void.class), _function_2);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
        EList<JvmAnnotationReference> _annotations = it.getAnnotations();
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, route);
        boolean _isPwa = model.isPwa();
        if (_isPwa) {
          JvmAnnotationReference pwaAnno = this._annotationTypesBuilder.annotationRef(PWA.class);
          String _xifexpression = null;
          boolean _isHasLongName = model.isHasLongName();
          if (_isHasLongName) {
            _xifexpression = model.getLongName();
          } else {
            _xifexpression = model.getName();
          }
          this._annotationExtension.addAnnAttr(pwaAnno, model, "name", _xifexpression);
          this._annotationExtension.addAnnAttr(pwaAnno, model, "shortName", model.getName());
          EList<JvmAnnotationReference> _annotations_1 = it.getAnnotations();
          this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, pwaAnno);
        }
      };
      acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(model, _plus_4), _function_1);
      boolean _isHasLogo = model.getLayout().isHasLogo();
      if (_isHasLogo) {
        this.createResource(acceptor, model, model.getLayout().getLogoPath());
      }
      final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(AppLayout.class);
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        EList<JvmAnnotationReference> _annotations = it.getAnnotations();
        JvmAnnotationReference _themeAnnotation = this.getThemeAnnotation(model);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _themeAnnotation);
        JvmAnnotationReference viewPort = this._annotationTypesBuilder.annotationRef(Viewport.class);
        this._annotationExtension.addAnnAttr(viewPort, model, "value", "width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes, viewport-fit=cover");
        EList<JvmAnnotationReference> _annotations_1 = it.getAnnotations();
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, viewPort);
        EList<JvmMember> _members = it.getMembers();
        final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
          final Procedure1<ITreeAppendable> _function_4 = (ITreeAppendable it_2) -> {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("new ");
            it_2.append(_builder);
            it_2.append(HashMap.class);
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("<>()");
            it_2.append(_builder_1);
          };
          this._jvmTypesBuilder.setInitializer(it_1, _function_4);
        };
        JvmField _field = this._jvmTypesBuilder.toField(model, "tabLookup", this._typeReferenceBuilder.typeRef(Map.class, this._typeReferenceBuilder.typeRef(Tab.class), this._typeReferenceBuilder.typeRef(com.vaadin.flow.component.Component.class)), _function_3);
        this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
        EList<JvmMember> _members_1 = it.getMembers();
        final Procedure1<JvmConstructor> _function_4 = (JvmConstructor it_1) -> {
          final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_2) -> {
            it_2.append(Image.class);
            StringConcatenation _builder = new StringConcatenation();
            _builder.append(" ");
            _builder.append("img = new Image(\"");
            String _makeRelative = this.makeRelative(model.getLayout().getLogoPath());
            _builder.append(_makeRelative, " ");
            _builder.append("\" , \"Vaadin Logo\");");
            _builder.newLineIfNotEmpty();
            it_2.append(_builder);
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("img.setHeight(\"44px\");");
            _builder_1.newLine();
            _builder_1.append("addToNavbar(new ");
            it_2.append(_builder_1);
            it_2.append(DrawerToggle.class);
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("(), img);");
            _builder_2.newLine();
            it_2.append(_builder_2);
            it_2.append(Tabs.class);
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append(" ");
            _builder_3.append("tabs = new Tabs();");
            _builder_3.newLine();
            _builder_3.append("tabs.setOrientation(Tabs.Orientation.VERTICAL);");
            _builder_3.newLine();
            _builder_3.append("tabs.addSelectedChangeListener(event -> {");
            _builder_3.newLine();
            _builder_3.append("  ");
            _builder_3.append("final Tab selectedTab = event.getSelectedTab();");
            _builder_3.newLine();
            _builder_3.append("  ");
            _builder_3.append("final ");
            it_2.append(_builder_3);
            it_2.append(com.vaadin.flow.component.Component.class);
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append(" ");
            _builder_4.append("component = tabLookup.get(selectedTab);");
            _builder_4.newLine();
            _builder_4.append("  ");
            _builder_4.append("setContent(component);");
            _builder_4.newLine();
            _builder_4.append("});");
            _builder_4.newLine();
            _builder_4.append("addToDrawer(tabs);");
            _builder_4.newLine();
            _builder_4.append("setContent(new Span(\"click in the menu ;-) , you will see me never again..\"));");
            _builder_4.newLine();
            it_2.append(_builder_4);
            final ITreeAppendable current = it_2;
            final Consumer<GeoTab> _function_6 = (GeoTab it_3) -> {
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("tabLookup.put(new ");
              current.append(_builder_5);
              current.append(Tab.class);
              StringConcatenation _builder_6 = new StringConcatenation();
              _builder_6.append("(new ");
              current.append(_builder_6);
              current.append(HorizontalLayout.class);
              StringConcatenation _builder_7 = new StringConcatenation();
              _builder_7.append("(");
              current.append(_builder_7);
              current.append(VaadinIcon.class);
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append(".");
              String _upperCase = it_3.getIconName().toUpperCase();
              _builder_8.append(_upperCase);
              _builder_8.append(".create(), new ");
              current.append(_builder_8);
              current.append(Span.class);
              StringConcatenation _builder_9 = new StringConcatenation();
              _builder_9.append("(\"");
              String _name_1 = it_3.getName();
              _builder_9.append(_name_1);
              _builder_9.append("\"))), new ");
              String _packageName_4 = model.getPackageName();
              String _plus_5 = (_packageName_4 + ".");
              String _firstUpper = StringExtensions.toFirstUpper(it_3.getName());
              String _plus_6 = (_plus_5 + _firstUpper);
              _builder_9.append(_plus_6);
              _builder_9.append("());");
              _builder_9.newLineIfNotEmpty();
              current.append(_builder_9);
            };
            model.getLayout().getTabs().forEach(_function_6);
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("for(Tab tab:tabLookup.keySet()) {");
            _builder_5.newLine();
            _builder_5.append("\t");
            _builder_5.append("tabs.add(tab);");
            _builder_5.newLine();
            _builder_5.append("}");
            it_2.append(_builder_5);
          };
          this._jvmTypesBuilder.setBody(it_1, _function_5);
        };
        JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(model, _function_4);
        this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_1, _constructor);
      };
      acceptor.<JvmGenericType>accept(layoutCls, _function_2);
      final Procedure1<JvmGenericType> _function_3 = (JvmGenericType it) -> {
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Composite.class, this._typeReferenceBuilder.typeRef(Div.class));
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        JvmAnnotationReference route2 = this._annotationTypesBuilder.annotationRef(Route.class);
        this._annotationExtension.addAnnAttr(route2, model, "value", "main");
        this._annotationExtension.addAnnAttr(route2, model, "layout", this._typeReferenceBuilder.typeRef(layoutCls));
        EList<JvmAnnotationReference> _annotations = it.getAnnotations();
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, route2);
        EList<JvmMember> _members = it.getMembers();
        final Procedure1<JvmConstructor> _function_4 = (JvmConstructor it_1) -> {
          final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_2) -> {
            it_2.append(Span.class);
            StringConcatenation _builder = new StringConcatenation();
            _builder.append(" ");
            _builder.append("pageContent = new Span(\"page-content\");");
            _builder.newLine();
            it_2.append(_builder);
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("pageContent.setId(\"Page content\");");
            _builder_1.newLine();
            _builder_1.append("getContent().add(pageContent);");
            it_2.append(_builder_1);
          };
          this._jvmTypesBuilder.setBody(it_1, _function_5);
        };
        JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(model, _function_4);
        this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, _constructor);
      };
      acceptor.<JvmGenericType>accept(mainViewCls, _function_3);
      boolean _isHasStyle = model.isHasStyle();
      if (_isHasStyle) {
        this.createResource(acceptor, model, model.getStyle());
      }
      final Consumer<GeoTab> _function_4 = (GeoTab it) -> {
        final GeoTab current = it;
        String _packageName_4 = model.getPackageName();
        String _plus_5 = (_packageName_4 + ".");
        String _firstUpper = StringExtensions.toFirstUpper(it.getName());
        String _plus_6 = (_plus_5 + _firstUpper);
        final Procedure1<JvmGenericType> _function_5 = (JvmGenericType it_1) -> {
          EList<JvmTypeReference> _superTypes = it_1.getSuperTypes();
          JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Composite.class, this._typeReferenceBuilder.typeRef(Div.class));
          this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
          JvmAnnotationReference route2 = this._annotationTypesBuilder.annotationRef(Route.class);
          this._annotationExtension.addAnnAttr(route2, model, "value", current.getName());
          this._annotationExtension.addAnnAttr(route2, model, "layout", this._typeReferenceBuilder.typeRef(layoutCls));
          EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
          this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, route2);
          boolean _isHasTopology = current.isHasTopology();
          if (_isHasTopology) {
            boolean _contains = model.eResource().getURI().toString().contains(".osgi");
            if (_contains) {
              EList<JvmAnnotationReference> _annotations_1 = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(JavaScript.class, "frontend://src/d3.min.js");
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, _annotationRef);
              EList<JvmAnnotationReference> _annotations_2 = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef_1 = this._annotationTypesBuilder.annotationRef(JavaScript.class, "frontend://src/topojson.min.js");
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_2, _annotationRef_1);
              EList<JvmAnnotationReference> _annotations_3 = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef_2 = this._annotationTypesBuilder.annotationRef(JavaScript.class, "frontend://src/topology.js");
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_3, _annotationRef_2);
            } else {
              EList<JvmAnnotationReference> _annotations_4 = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef_3 = this._annotationTypesBuilder.annotationRef(JavaScript.class, "./src/d3.min.js");
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_4, _annotationRef_3);
              EList<JvmAnnotationReference> _annotations_5 = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef_4 = this._annotationTypesBuilder.annotationRef(JavaScript.class, "./src/topojson.min.js");
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_5, _annotationRef_4);
              EList<JvmAnnotationReference> _annotations_6 = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef_5 = this._annotationTypesBuilder.annotationRef(JavaScript.class, "./src/topology.js");
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_6, _annotationRef_5);
            }
            boolean _isHasStyle_1 = model.isHasStyle();
            if (_isHasStyle_1) {
              boolean _contains_1 = model.eResource().getURI().toString().contains(".osgi");
              if (_contains_1) {
                EList<JvmAnnotationReference> _annotations_7 = it_1.getAnnotations();
                StringConcatenation _builder = new StringConcatenation();
                _builder.append("frontend://styles/");
                String _createAlias = this.createAlias(model.getStyle(), true);
                _builder.append(_createAlias);
                JvmAnnotationReference _annotationRef_6 = this._annotationTypesBuilder.annotationRef(HtmlImport.class, _builder.toString());
                this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_7, _annotationRef_6);
              } else {
                EList<JvmAnnotationReference> _annotations_8 = it_1.getAnnotations();
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("./styles/");
                String _createAlias_1 = this.createAlias(model.getStyle(), true);
                _builder_1.append(_createAlias_1);
                JvmAnnotationReference _annotationRef_7 = this._annotationTypesBuilder.annotationRef(HtmlImport.class, _builder_1.toString());
                this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_8, _annotationRef_7);
              }
            }
          }
          boolean _isHasTopology_1 = current.isHasTopology();
          if (_isHasTopology_1) {
            EList<JvmMember> _members = it_1.getMembers();
            final Procedure1<JvmField> _function_6 = (JvmField it_2) -> {
              final Procedure1<ITreeAppendable> _function_7 = (ITreeAppendable it_3) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("new Div()");
                it_3.append(_builder_2);
              };
              this._jvmTypesBuilder.setInitializer(it_2, _function_7);
            };
            JvmField _field = this._jvmTypesBuilder.toField(model, "topoDiv", this._typeReferenceBuilder.typeRef(Div.class), _function_6);
            this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
            EList<JvmMember> _members_1 = it_1.getMembers();
            final Procedure1<JvmField> _function_7 = (JvmField it_2) -> {
              final Procedure1<ITreeAppendable> _function_8 = (ITreeAppendable it_3) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("new TextField(\"state\")");
                it_3.append(_builder_2);
              };
              this._jvmTypesBuilder.setInitializer(it_2, _function_8);
            };
            JvmField _field_1 = this._jvmTypesBuilder.toField(model, "stateField", this._typeReferenceBuilder.typeRef(TextField.class), _function_7);
            this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
            EList<JvmMember> _members_2 = it_1.getMembers();
            final Procedure1<JvmField> _function_8 = (JvmField it_2) -> {
              final Procedure1<ITreeAppendable> _function_9 = (ITreeAppendable it_3) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("new TextField(\"type\")");
                it_3.append(_builder_2);
              };
              this._jvmTypesBuilder.setInitializer(it_2, _function_9);
            };
            JvmField _field_2 = this._jvmTypesBuilder.toField(model, "adminTypeField", this._typeReferenceBuilder.typeRef(TextField.class), _function_8);
            this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field_2);
            EList<JvmMember> _members_3 = it_1.getMembers();
            final Procedure1<JvmField> _function_9 = (JvmField it_2) -> {
              final Procedure1<ITreeAppendable> _function_10 = (ITreeAppendable it_3) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("new TextField(\"administrative region\")");
                it_3.append(_builder_2);
              };
              this._jvmTypesBuilder.setInitializer(it_2, _function_10);
            };
            JvmField _field_3 = this._jvmTypesBuilder.toField(model, "adminField", this._typeReferenceBuilder.typeRef(TextField.class), _function_9);
            this._jvmTypesBuilder.<JvmField>operator_add(_members_3, _field_3);
            EList<JvmMember> _members_4 = it_1.getMembers();
            JvmField _field_4 = this._jvmTypesBuilder.toField(model, "longitude", this._typeReferenceBuilder.typeRef(Integer.class));
            this._jvmTypesBuilder.<JvmField>operator_add(_members_4, _field_4);
            EList<JvmMember> _members_5 = it_1.getMembers();
            JvmField _field_5 = this._jvmTypesBuilder.toField(model, "latitude", this._typeReferenceBuilder.typeRef(Integer.class));
            this._jvmTypesBuilder.<JvmField>operator_add(_members_5, _field_5);
            EList<JvmMember> _members_6 = it_1.getMembers();
            JvmField _field_6 = this._jvmTypesBuilder.toField(model, "scale", this._typeReferenceBuilder.typeRef(Integer.class));
            this._jvmTypesBuilder.<JvmField>operator_add(_members_6, _field_6);
          }
          EList<JvmMember> _members_7 = it_1.getMembers();
          final Procedure1<JvmConstructor> _function_10 = (JvmConstructor it_2) -> {
            final Procedure1<ITreeAppendable> _function_11 = (ITreeAppendable it_3) -> {
              it_3.append(HorizontalLayout.class);
              StringConcatenation _builder_2 = new StringConcatenation();
              _builder_2.append(" ");
              _builder_2.append("base = new HorizontalLayout();");
              _builder_2.newLine();
              _builder_2.append("base.setId(\"base\");");
              _builder_2.newLine();
              _builder_2.append("base.setSizeFull();");
              _builder_2.newLine();
              _builder_2.append("getContent().add(base);");
              _builder_2.newLine();
              it_3.append(_builder_2);
              it_3.append(VerticalLayout.class);
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append(" ");
              _builder_3.append("components = new VerticalLayout();");
              _builder_3.newLine();
              _builder_3.append("base.add(components);");
              _builder_3.newLine();
              it_3.append(_builder_3);
              boolean _isHasTopology_2 = current.isHasTopology();
              if (_isHasTopology_2) {
                it_3.append(TextField.class);
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append(" ");
                _builder_4.append("longitudeField = new TextField(\"longitude\");");
                _builder_4.newLine();
                it_3.append(_builder_4);
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("longitudeField.addValueChangeListener(event -> {longitude = Integer.parseInt(longitudeField.getValue());});");
                _builder_5.newLine();
                _builder_5.append("components.add(longitudeField);");
                _builder_5.newLine();
                _builder_5.append("TextField latitudeField = new TextField(\"latitude\");");
                _builder_5.newLine();
                _builder_5.append("latitudeField.addValueChangeListener(event -> {latitude = Integer.parseInt(latitudeField.getValue());});");
                _builder_5.newLine();
                _builder_5.append("components.add(latitudeField);");
                _builder_5.newLine();
                _builder_5.append("TextField scaleField = new TextField(\"scale\");");
                _builder_5.newLine();
                _builder_5.append("scaleField.addValueChangeListener(event -> {scale = Integer.parseInt(scaleField.getValue());});");
                _builder_5.newLine();
                _builder_5.append("stateField.setReadOnly(true);");
                _builder_5.newLine();
                _builder_5.append("adminTypeField.setReadOnly(true);");
                _builder_5.newLine();
                _builder_5.append("adminField.setReadOnly(true);");
                _builder_5.newLine();
                _builder_5.append("components.add(scaleField); ");
                _builder_5.newLine();
                it_3.append(_builder_5);
                StringConcatenation _builder_6 = new StringConcatenation();
                _builder_6.append("components.add(stateField, adminTypeField, adminField);");
                _builder_6.newLine();
                it_3.append(_builder_6);
                it_3.append(Button.class);
                StringConcatenation _builder_7 = new StringConcatenation();
                _builder_7.append(" ");
                _builder_7.append("button = new Button(\"show topology\");");
                _builder_7.newLine();
                it_3.append(_builder_7);
                StringConcatenation _builder_8 = new StringConcatenation();
                _builder_8.append("button.addClickListener(click -> {");
                _builder_8.newLine();
                _builder_8.append("\t");
                _builder_8.append("getElement().executeJavaScript(\"topology($0, $1, $2, $3, $4, $5)\", \"");
                String _makeRelative = this.makeRelative(current.getTopology());
                _builder_8.append(_makeRelative, "\t");
                _builder_8.append("\", getElement(), topoDiv.getElement(), longitude, latitude, scale);");
                _builder_8.newLineIfNotEmpty();
                _builder_8.append("});");
                _builder_8.newLine();
                _builder_8.append("components.add(button);");
                _builder_8.newLine();
                _builder_8.append("components.setWidth(\"200px\");");
                _builder_8.newLine();
                _builder_8.append("topoDiv.setSizeFull();");
                _builder_8.newLine();
                _builder_8.append("base.add(topoDiv);");
                _builder_8.newLine();
                it_3.append(_builder_8);
              }
            };
            this._jvmTypesBuilder.setBody(it_2, _function_11);
          };
          JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(model, _function_10);
          this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_7, _constructor);
          boolean _isHasTopology_2 = current.isHasTopology();
          if (_isHasTopology_2) {
            EList<JvmMember> _members_8 = it_1.getMembers();
            final Procedure1<JvmOperation> _function_11 = (JvmOperation it_2) -> {
              EList<JvmFormalParameter> _parameters = it_2.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(model, "name1", this._typeReferenceBuilder.typeRef(String.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              EList<JvmFormalParameter> _parameters_1 = it_2.getParameters();
              JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(model, "type2", this._typeReferenceBuilder.typeRef(String.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
              EList<JvmFormalParameter> _parameters_2 = it_2.getParameters();
              JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(model, "name2", this._typeReferenceBuilder.typeRef(String.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
              EList<JvmAnnotationReference> _annotations_9 = it_2.getAnnotations();
              JvmAnnotationReference _annotationRef_8 = this._annotationTypesBuilder.annotationRef(ClientCallable.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_9, _annotationRef_8);
              final Procedure1<ITreeAppendable> _function_12 = (ITreeAppendable it_3) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("stateField.setValue(name1);");
                _builder_2.newLine();
                _builder_2.append("adminTypeField.setValue(type2);");
                _builder_2.newLine();
                _builder_2.append("adminField.setValue(name2);");
                _builder_2.newLine();
                it_3.append(_builder_2);
              };
              this._jvmTypesBuilder.setBody(it_2, _function_12);
            };
            JvmOperation _method = this._jvmTypesBuilder.toMethod(model, "onTopoClick", this._typeReferenceBuilder.typeRef(void.class), _function_11);
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_8, _method);
          }
        };
        acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(model, _plus_6), _function_5);
        boolean _isHasTopology = it.isHasTopology();
        if (_isHasTopology) {
          this.createResource(acceptor, model, it.getTopology());
        }
      };
      model.getLayout().getTabs().forEach(_function_4);
    }
  }
  
  public JvmAnnotationReference getThemeAnnotation(final GeoModel model) {
    JvmAnnotationReference _xblockexpression = null;
    {
      JvmAnnotationReference themeAnno = this._annotationTypesBuilder.annotationRef(Theme.class);
      GeoTheme _theme = model.getTheme();
      boolean _equals = Objects.equal(_theme, GeoTheme.LUMO);
      if (_equals) {
        this._annotationExtension.addAnnAttr(themeAnno, model, this._typeReferenceBuilder.typeRef(Lumo.class));
      } else {
        GeoTheme _theme_1 = model.getTheme();
        boolean _equals_1 = Objects.equal(_theme_1, GeoTheme.MATERIAL);
        if (_equals_1) {
          this._annotationExtension.addAnnAttr(themeAnno, model, this._typeReferenceBuilder.typeRef(Material.class));
        }
      }
      _xblockexpression = themeAnno;
    }
    return _xblockexpression;
  }
  
  public void createResource(final IJvmDeclaredTypeAcceptor acceptor, final GeoModel model, final String fullPath) {
    final String path = this.makeRelative(fullPath);
    String _packageName = model.getPackageName();
    String _plus = (_packageName + ".resources.Resource");
    String _firstUpper = StringExtensions.toFirstUpper(this.createAlias(path, false));
    String _plus_1 = (_plus + _firstUpper);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      JvmAnnotationReference anno = this._annotationTypesBuilder.annotationRef(Component.class);
      this._annotationExtension.addAnnAttr(anno, model, "immediate", Boolean.valueOf(true));
      this._annotationExtension.addAnnAttr(anno, model, "service", this._typeReferenceBuilder.typeRef(OsgiVaadinStaticResource.class));
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, anno);
      this._jvmTypesBuilder.setDocumentation(it, this._jvmTypesBuilder.getDocumentation(model));
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(OsgiVaadinStaticResource.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations_1 = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, _annotationRef);
        final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_2) -> {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("return \"");
          _builder.append(path);
          _builder.append("\";");
          it_2.append(_builder);
        };
        this._jvmTypesBuilder.setBody(it_1, _function_2);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(model, "getPath", this._typeReferenceBuilder.typeRef(String.class), _function_1);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations_1 = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations_1, _annotationRef);
        final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_2) -> {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("return \"/");
          String _createAlias = this.createAlias(path, true);
          _builder.append(_createAlias);
          _builder.append("\";");
          it_2.append(_builder);
        };
        this._jvmTypesBuilder.setBody(it_1, _function_3);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(model, "getAlias", this._typeReferenceBuilder.typeRef(String.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(model, _plus_1), _function);
  }
  
  public String makeRelative(final String fullPath) {
    String resourcePath = "src/main/resources";
    int idx = fullPath.lastIndexOf(resourcePath);
    if ((idx > 0)) {
      int _length = resourcePath.length();
      int _plus = (idx + _length);
      return fullPath.substring(_plus);
    }
    return fullPath;
  }
  
  public String createAlias(final String path, final boolean withExtension) {
    String[] parts = path.split("/");
    int _length = parts.length;
    int _minus = (_length - 1);
    String complete = parts[_minus];
    if (withExtension) {
      return complete;
    }
    String[] aliasArray = complete.split(Pattern.quote("."));
    return aliasArray[0];
  }
  
  public void infer(final EObject model, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (model instanceof GeoModel) {
      _infer((GeoModel)model, acceptor, isPreIndexingPhase);
      return;
    } else if (model != null) {
      _infer(model, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, acceptor, isPreIndexingPhase).toString());
    }
  }
}
